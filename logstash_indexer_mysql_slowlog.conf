input {
  file {
    type => "mysqlslowlog"
    path => "/var/log/logstash/mysql_slow.log"
    codec => multiline {
      pattern => "^# User@Host:"
      negate => true
      what => "previous"
    }
  }
}

filter {
  # drop sleep events
  grok {
    match => { "message" => "SELECT SLEEP" }
    add_tag => [ "sleep_drop" ]
    tag_on_failure => [] # prevent default _grokparsefailure tag on real records
  }
  if "sleep_drop" in [tags] {
    drop {}
  }
  grok {
    match => [ "message", "(?m)^# User@Host: %{USER:user}\[[^\]]+\] @ (?:(?<clienthost>\S*) )?\[(?:%{IP:clientip})?\]\s*Id: %{NUMBER:id:int}\s+# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}\s*(?:use %{DATA:database};\s*)?SET timestamp=%{NUMBER:timestamp};\s*(?<query>(?<action>\w+)\s+.*)\n# Time:.*$" ]
  }
  #date {
  #  match => [ "timestamp", "UNIX" ]
  #  remove_field => [ "timestamp" ]
  #}


  #add by 

   if ("_grokparsefailure" in [tags]) {
      drop {}
  }
  #date {
  #  match => [ "timestamp", "UNIX" ]
  #}

  mutate {
    gsub => [
        "sql", "\nSET timestamp=\d+?;\n", "",
        "sql", "\nuse [a-zA-Z0-9\-\_]+?;", "",
        "sql", "\n# Time: \d+\s+\d+:\d+:\d+", "",
        "sql", "\n/usr/local/mysql/bin/mysqld.+$", "",
        "sql", "\nTcp port:.+$", "",
        "sql", "\nTime .+$", ""
    ]
  }



  # calculate unique hash
  mutate {
    add_field => {"sql_for_hash" => "%{sql}"}
  }
  mutate {
    gsub => [
        "sql_for_hash", "'.+?'", "",
        "sql_for_hash", "-?\d*\.{0,1}\d+", ""
    ]
  }
  checksum {
    algorithm => "md5"
    keys => ["sql_for_hash"]
  }

  # Drop the captured timestamp field since it has been moved to the time of the event
  mutate {
    # TODO: remove the message field
    remove_field => ["timestamp", "message", "sql_for_hash"]
  }
  #add by 




}

output {
    if "_grokparsefailure" in [tags] {
        file {
            path => "/var/log/logstash/grokparsefailure.log"
        }
    }else {
        elasticsearch {
            index => "logstash-mysqlslowlog-%{+YYYY-MM-dd}" #索引名一定要以logstash开头吗
            hosts => ["127.0.0.1:9200"]
            template => "/etc/logstash/template/mysqlstatus-template.json"
            template_name => "logstash" #这里的命名一定要是logstash吗
            template_overwrite => true
        }
   }

}
